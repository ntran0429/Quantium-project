"0",""
"0","#### Create a function to calculate a standardized magnitude distance for a measure,"
"0","#### looping through each control store"
"0","calculateMagnitudeDistance <- function(inputTable, metricCol, storeComparison) {"
"0",""
"0","  calcDistTable = data.table(Store1 = numeric(), Store2 = numeric(), YEARMONTH = numeric(), measure = numeric())"
"0",""
"0","  storeNumbers <- unique(inputTable[, STORE_NBR])"
"0","  for (i in storeNumbers) {"
"0","    calculatedMeasure = data.table(""Store1"" = storeComparison,"
"0","                                   ""Store2"" = i,"
"0","                                   ""YEARMONTH"" = inputTable[STORE_NBR == storeComparison, YEARMONTH],"
"0","                                   ""measure"" = abs(inputTable[STORE_NBR == storeComparison, eval(metricCol)]"
"0","                                                   - inputTable[STORE_NBR == i,eval(metricCol)]))"
"0","    calcDistTable <- rbind(calcDistTable, calculatedMeasure)"
"0","    }"
"0",""
"0","#### Standardize the magnitude distance so that the measure ranges from 0 to 1"
"0","  minMaxDist <- calcDistTable[, .(minDist = min(measure), maxDist = max(measure)), by = c(""Store1"", ""YEARMONTH"")]"
"0","  distTable <- merge(calcDistTable, minMaxDist, by = c(""Store1"", ""YEARMONTH""))"
"0","  distTable[, magnitudeMeasure := 1 - (measure - minDist)/(maxDist - minDist)]"
"0",""
"0","  finalDistTable <- distTable[, .(mag_measure = mean(magnitudeMeasure)), by = .(Store1, Store2)]"
"0","  "
"0","  return(finalDistTable)"
"0","  }"
